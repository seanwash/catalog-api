// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generatedmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AlbumInput struct {
	ID         *int      `json:"id"`
	Name       string    `json:"name"`
	ReleasedAt time.Time `json:"releasedAt"`
	AlbumType  AlbumType `json:"albumType"`
}

type ArtistInput struct {
	ID   *int   `json:"id"`
	Name string `json:"name"`
}

type GenreInput struct {
	ID   *int   `json:"id"`
	Name string `json:"name"`
}

// Filters used for narrowing down a Track list.
type TrackFilter struct {
	// Full text search for Track name. Search string is inclusive, e.g. searching for "Spoil my" returns tracks with both "spoil" and "my" in the name.
	Name *string `json:"name"`
	// Find Track s by a related Artist's ID.
	ArtistID *int `json:"artistId"`
	// Find Tracks by a related Artist's Nmae.
	ArtistName *string `json:"artistName"`
}

type TrackInput struct {
	ID         *int           `json:"id"`
	Name       string         `json:"name"`
	DurationMs int            `json:"durationMS"`
	Artists    []*ArtistInput `json:"artists"`
	Albums     []*AlbumInput  `json:"albums"`
	Genres     []*GenreInput  `json:"genres"`
}

type AlbumType string

const (
	AlbumTypeAlbum       AlbumType = "ALBUM"
	AlbumTypeSingle      AlbumType = "SINGLE"
	AlbumTypeCompilation AlbumType = "COMPILATION"
)

var AllAlbumType = []AlbumType{
	AlbumTypeAlbum,
	AlbumTypeSingle,
	AlbumTypeCompilation,
}

func (e AlbumType) IsValid() bool {
	switch e {
	case AlbumTypeAlbum, AlbumTypeSingle, AlbumTypeCompilation:
		return true
	}
	return false
}

func (e AlbumType) String() string {
	return string(e)
}

func (e *AlbumType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlbumType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlbumType", str)
	}
	return nil
}

func (e AlbumType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
