#
# Scalars
#
scalar Time

#
# Schema
#

schema {
    query: Query
    mutation: Mutation
}

#
# Root Types
#

type Mutation {
    trackCreate(input: TrackInput!): Track!
    trackUpdate(id: ID!, input: TrackInput!): Track!
    trackDelete(id: ID!): Track!

    artistCreate(input: ArtistInput!): Artist!
    artistUpdate(id: ID!, input: ArtistInput!): Artist!
    artistDelete(id: ID!): Artist!

    albumCreate(input: AlbumInput!): Album!
    albumUpdate(id: ID!, input: AlbumInput!): Album!
    albumDelete(id: ID!): Album!

    genreCreate(input: GenreInput!): Genre!
    genreUpdate(id: ID!, input: GenreInput!): Genre!
    genreDelete(id: ID!): Genre!
}

type Query {
    "Get a list of Tracks. A default limit of 25 is applied unless overridden."
    tracks(limit: Int, offset: Int, filter: TrackFilter): [Track!]!
    "Get a single Track."
    track(id: ID!): Track!

    "Get a list of Artists. A default limit of 25 is applied unless overridden."
    artists(limit: Int, offset: Int, filter: ArtistFilter): [Artist!]!
    "Get a single Artist."
    artist(id: ID!): Artist!

    "Get a list of Albums. A default limit of 25 is applied unless overridden."
    albums(limit: Int, offset: Int, filter: AlbumFilter): [Album!]!
    "Get a single Album."
    album(id: ID!): Album!

    "Get a list of Genres. A default limit of 25 is applied unless overridden."
    genres(limit: Int, offset: Int): [Genre!]!
    "Get a single Genre."
    genre(id: ID!): Genre!
}

#
# Resource Types
#

"A type that describes a Track."
type Track {
    id: ID!
    name: String!
    durationMs: Int!
    artists: [Artist!]
    albums: [Album!]
    genres: [Genre!]
}

"A type that describes an Artist."
type Artist {
    id: ID!
    name: String!
}

enum AlbumType {
    ALBUM
    SINGLE
    COMPILATION
}

"A type that describes an Album."
type Album {
    id: ID!
    name: String!
    albumType: AlbumType!
    releasedAt: Time
    tracks: [Track!]
}

"A type that describes an Genre."
type Genre {
    id: ID!
    name: String!
}

#
# Filter Inputs
#

"Filters used for narrowing down a Track list."
input TrackFilter {
    "Find Tracks by name."
    name: String
    "Find Track s by a related Artist's ID."
    artistId: ID
    "Find Tracks by a related Artist's Name."
    artistName: String
}

input ArtistFilter {
    "Find Artists by name."
    name: String
}

input AlbumFilter {
    "Find Albums by name."
    name: String
    albumType: AlbumType
}

#
# Mutation Inputs
#

input TrackInput {
    id: ID
    name: String!
    "Track duration in milliseconds."
    durationMS: Int!
    "IDs for existing Artists that this Track belongs to."
    artistIds: [ID!]
    "IDs for existing Albums that this Track belongs to."
    albumIds: [ID!]
    "IDs for existing Genres that this Track has."
    genreIds: [ID!]
}

input AlbumInput {
    id: ID
    name: String!
    "Release time and date of the album. ISO 8601 format required."
    releasedAt: Time!
    albumType: AlbumType!
    "IDs for existing Tracks that this Album has."
    trackIds: [ID!]
}

input ArtistInput {
    id: ID
    name: String!
}

input GenreInput {
    id: ID
    name: String!
}
