// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTracks(t *testing.T) {
	t.Parallel()

	query := Tracks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTracksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tracks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTracksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TrackExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Track exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TrackExists to return true, but got false.")
	}
}

func testTracksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	trackFound, err := FindTrack(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if trackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTracksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tracks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTracksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tracks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTracksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	trackOne := &Track{}
	trackTwo := &Track{}
	if err = randomize.Struct(seed, trackOne, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}
	if err = randomize.Struct(seed, trackTwo, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTracksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	trackOne := &Track{}
	trackTwo := &Track{}
	if err = randomize.Struct(seed, trackOne, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}
	if err = randomize.Struct(seed, trackTwo, trackDBTypes, false, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTracksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTracksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(trackColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackToManyAlbums(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"track_albums\" (\"track_id\", \"album_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"track_albums\" (\"track_id\", \"album_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Albums().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadAlbums(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Albums); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Albums = nil
	if err = a.L.LoadAlbums(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Albums); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyArtists(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"track_artists\" (\"track_id\", \"artist_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"track_artists\" (\"track_id\", \"artist_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Artists().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadArtists(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Artists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Artists = nil
	if err = a.L.LoadArtists(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Artists); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyGenres(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, genreDBTypes, false, genreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, genreDBTypes, false, genreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"track_genres\" (\"track_id\", \"genre_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"track_genres\" (\"track_id\", \"genre_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Genres().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackSlice{&a}
	if err = a.L.LoadGenres(ctx, tx, false, (*[]*Track)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Genres = nil
	if err = a.L.LoadGenres(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackToManyAddOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Album{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAlbums(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Albums[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Albums[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Albums().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAlbums(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAlbums(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Albums[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Albums[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAlbums(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAlbums(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Albums) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Albums[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Albums[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackToManyAddOpArtists(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Artist{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Artist{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddArtists(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Artists[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Artists[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Artists().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpArtists(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Artist{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetArtists(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Artists().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetArtists(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Artists().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Artists[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Artists[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpArtists(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Artist{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddArtists(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Artists().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveArtists(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Artists().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Artists) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Artists[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Artists[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackToManyAddOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Genre{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGenres(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Tracks[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Genres[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Genres[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Genres().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackToManySetOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGenres(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGenres(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Tracks) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Genres[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Genres[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackToManyRemoveOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Track
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackDBTypes, false, strmangle.SetComplement(trackPrimaryKeyColumns, trackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGenres(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGenres(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Tracks) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tracks[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Genres) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Genres[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Genres[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTracksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTracksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tracks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	trackDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `DurationMS`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testTracksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackDBTypes, true, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTracksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Track{}
	if err = randomize.Struct(seed, o, trackDBTypes, true, trackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackDBTypes, true, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(trackAllColumns, trackPrimaryKeyColumns) {
		fields = trackAllColumns
	} else {
		fields = strmangle.SetComplement(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TrackSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTracksUpsert(t *testing.T) {
	t.Parallel()

	if len(trackAllColumns) == len(trackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Track{}
	if err = randomize.Struct(seed, &o, trackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Track: %s", err)
	}

	count, err := Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, trackDBTypes, false, trackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Track struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Track: %s", err)
	}

	count, err = Tracks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
