// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Track is an object representing the database table.
type Track struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DurationMS int       `boil:"duration_ms" json:"duration_ms" toml:"duration_ms" yaml:"duration_ms"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *trackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackColumns = struct {
	ID         string
	Name       string
	DurationMS string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Name:       "name",
	DurationMS: "duration_ms",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var TrackWhere = struct {
	ID         whereHelperint
	Name       whereHelperstring
	DurationMS whereHelperint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint{field: "\"tracks\".\"id\""},
	Name:       whereHelperstring{field: "\"tracks\".\"name\""},
	DurationMS: whereHelperint{field: "\"tracks\".\"duration_ms\""},
	CreatedAt:  whereHelpertime_Time{field: "\"tracks\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"tracks\".\"updated_at\""},
}

// TrackRels is where relationship names are stored.
var TrackRels = struct {
	Albums  string
	Artists string
	Genres  string
}{
	Albums:  "Albums",
	Artists: "Artists",
	Genres:  "Genres",
}

// trackR is where relationships are stored.
type trackR struct {
	Albums  AlbumSlice
	Artists ArtistSlice
	Genres  GenreSlice
}

// NewStruct creates a new relationship struct
func (*trackR) NewStruct() *trackR {
	return &trackR{}
}

// trackL is where Load methods for each relationship are stored.
type trackL struct{}

var (
	trackAllColumns            = []string{"id", "name", "duration_ms", "created_at", "updated_at"}
	trackColumnsWithoutDefault = []string{"name", "duration_ms", "created_at", "updated_at"}
	trackColumnsWithDefault    = []string{"id"}
	trackPrimaryKeyColumns     = []string{"id"}
)

type (
	// TrackSlice is an alias for a slice of pointers to Track.
	// This should generally be used opposed to []Track.
	TrackSlice []*Track

	trackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackType                 = reflect.TypeOf(&Track{})
	trackMapping              = queries.MakeStructMapping(trackType)
	trackPrimaryKeyMapping, _ = queries.BindMapping(trackType, trackMapping, trackPrimaryKeyColumns)
	trackInsertCacheMut       sync.RWMutex
	trackInsertCache          = make(map[string]insertCache)
	trackUpdateCacheMut       sync.RWMutex
	trackUpdateCache          = make(map[string]updateCache)
	trackUpsertCacheMut       sync.RWMutex
	trackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single track record from the query.
func (q trackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Track, error) {
	o := &Track{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracks")
	}

	return o, nil
}

// All returns all Track records from the query.
func (q trackQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackSlice, error) {
	var o []*Track

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Track slice")
	}

	return o, nil
}

// Count returns the count of all Track records in the query.
func (q trackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracks exists")
	}

	return count > 0, nil
}

// Albums retrieves all the album's Albums with an executor.
func (o *Track) Albums(mods ...qm.QueryMod) albumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"track_albums\" on \"albums\".\"id\" = \"track_albums\".\"album_id\""),
		qm.Where("\"track_albums\".\"track_id\"=?", o.ID),
	)

	query := Albums(queryMods...)
	queries.SetFrom(query.Query, "\"albums\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"albums\".*"})
	}

	return query
}

// Artists retrieves all the artist's Artists with an executor.
func (o *Track) Artists(mods ...qm.QueryMod) artistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"track_artists\" on \"artists\".\"id\" = \"track_artists\".\"artist_id\""),
		qm.Where("\"track_artists\".\"track_id\"=?", o.ID),
	)

	query := Artists(queryMods...)
	queries.SetFrom(query.Query, "\"artists\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"artists\".*"})
	}

	return query
}

// Genres retrieves all the genre's Genres with an executor.
func (o *Track) Genres(mods ...qm.QueryMod) genreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"track_genres\" on \"genres\".\"id\" = \"track_genres\".\"genre_id\""),
		qm.Where("\"track_genres\".\"track_id\"=?", o.ID),
	)

	query := Genres(queryMods...)
	queries.SetFrom(query.Query, "\"genres\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"genres\".*"})
	}

	return query
}

// LoadAlbums allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadAlbums(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"albums\".*, \"a\".\"track_id\""),
		qm.From("\"albums\""),
		qm.InnerJoin("\"track_albums\" as \"a\" on \"albums\".\"id\" = \"a\".\"album_id\""),
		qm.WhereIn("\"a\".\"track_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load albums")
	}

	var resultSlice []*Album

	var localJoinCols []int
	for results.Next() {
		one := new(Album)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.AlbumType, &one.ReleasedAt, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for albums")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice albums")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for albums")
	}

	if singular {
		object.R.Albums = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &albumR{}
			}
			foreign.R.Tracks = append(foreign.R.Tracks, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Albums = append(local.R.Albums, foreign)
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.Tracks = append(foreign.R.Tracks, local)
				break
			}
		}
	}

	return nil
}

// LoadArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadArtists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"artists\".*, \"a\".\"track_id\""),
		qm.From("\"artists\""),
		qm.InnerJoin("\"track_artists\" as \"a\" on \"artists\".\"id\" = \"a\".\"artist_id\""),
		qm.WhereIn("\"a\".\"track_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load artists")
	}

	var resultSlice []*Artist

	var localJoinCols []int
	for results.Next() {
		one := new(Artist)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for artists")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice artists")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artists")
	}

	if singular {
		object.R.Artists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &artistR{}
			}
			foreign.R.Tracks = append(foreign.R.Tracks, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Artists = append(local.R.Artists, foreign)
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.Tracks = append(foreign.R.Tracks, local)
				break
			}
		}
	}

	return nil
}

// LoadGenres allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadGenres(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"genres\".*, \"a\".\"track_id\""),
		qm.From("\"genres\""),
		qm.InnerJoin("\"track_genres\" as \"a\" on \"genres\".\"id\" = \"a\".\"genre_id\""),
		qm.WhereIn("\"a\".\"track_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load genres")
	}

	var resultSlice []*Genre

	var localJoinCols []int
	for results.Next() {
		one := new(Genre)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for genres")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice genres")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on genres")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genres")
	}

	if singular {
		object.R.Genres = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &genreR{}
			}
			foreign.R.Tracks = append(foreign.R.Tracks, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Genres = append(local.R.Genres, foreign)
				if foreign.R == nil {
					foreign.R = &genreR{}
				}
				foreign.R.Tracks = append(foreign.R.Tracks, local)
				break
			}
		}
	}

	return nil
}

// AddAlbums adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Albums.
// Sets related.R.Tracks appropriately.
func (o *Track) AddAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"track_albums\" (\"track_id\", \"album_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &trackR{
			Albums: related,
		}
	} else {
		o.R.Albums = append(o.R.Albums, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &albumR{
				Tracks: TrackSlice{o},
			}
		} else {
			rel.R.Tracks = append(rel.R.Tracks, o)
		}
	}
	return nil
}

// SetAlbums removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tracks's Albums accordingly.
// Replaces o.R.Albums with related.
// Sets related.R.Tracks's Albums accordingly.
func (o *Track) SetAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	query := "delete from \"track_albums\" where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAlbumsFromTracksSlice(o, related)
	if o.R != nil {
		o.R.Albums = nil
	}
	return o.AddAlbums(ctx, exec, insert, related...)
}

// RemoveAlbums relationships from objects passed in.
// Removes related items from R.Albums (uses pointer comparison, removal does not keep order)
// Sets related.R.Tracks.
func (o *Track) RemoveAlbums(ctx context.Context, exec boil.ContextExecutor, related ...*Album) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"track_albums\" where \"track_id\" = $1 and \"album_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAlbumsFromTracksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Albums {
			if rel != ri {
				continue
			}

			ln := len(o.R.Albums)
			if ln > 1 && i < ln-1 {
				o.R.Albums[i] = o.R.Albums[ln-1]
			}
			o.R.Albums = o.R.Albums[:ln-1]
			break
		}
	}

	return nil
}

func removeAlbumsFromTracksSlice(o *Track, related []*Album) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tracks {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Tracks)
			if ln > 1 && i < ln-1 {
				rel.R.Tracks[i] = rel.R.Tracks[ln-1]
			}
			rel.R.Tracks = rel.R.Tracks[:ln-1]
			break
		}
	}
}

// AddArtists adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Artists.
// Sets related.R.Tracks appropriately.
func (o *Track) AddArtists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Artist) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"track_artists\" (\"track_id\", \"artist_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &trackR{
			Artists: related,
		}
	} else {
		o.R.Artists = append(o.R.Artists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &artistR{
				Tracks: TrackSlice{o},
			}
		} else {
			rel.R.Tracks = append(rel.R.Tracks, o)
		}
	}
	return nil
}

// SetArtists removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tracks's Artists accordingly.
// Replaces o.R.Artists with related.
// Sets related.R.Tracks's Artists accordingly.
func (o *Track) SetArtists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Artist) error {
	query := "delete from \"track_artists\" where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeArtistsFromTracksSlice(o, related)
	if o.R != nil {
		o.R.Artists = nil
	}
	return o.AddArtists(ctx, exec, insert, related...)
}

// RemoveArtists relationships from objects passed in.
// Removes related items from R.Artists (uses pointer comparison, removal does not keep order)
// Sets related.R.Tracks.
func (o *Track) RemoveArtists(ctx context.Context, exec boil.ContextExecutor, related ...*Artist) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"track_artists\" where \"track_id\" = $1 and \"artist_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeArtistsFromTracksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Artists {
			if rel != ri {
				continue
			}

			ln := len(o.R.Artists)
			if ln > 1 && i < ln-1 {
				o.R.Artists[i] = o.R.Artists[ln-1]
			}
			o.R.Artists = o.R.Artists[:ln-1]
			break
		}
	}

	return nil
}

func removeArtistsFromTracksSlice(o *Track, related []*Artist) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tracks {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Tracks)
			if ln > 1 && i < ln-1 {
				rel.R.Tracks[i] = rel.R.Tracks[ln-1]
			}
			rel.R.Tracks = rel.R.Tracks[:ln-1]
			break
		}
	}
}

// AddGenres adds the given related objects to the existing relationships
// of the track, optionally inserting them as new records.
// Appends related to o.R.Genres.
// Sets related.R.Tracks appropriately.
func (o *Track) AddGenres(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genre) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"track_genres\" (\"track_id\", \"genre_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &trackR{
			Genres: related,
		}
	} else {
		o.R.Genres = append(o.R.Genres, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &genreR{
				Tracks: TrackSlice{o},
			}
		} else {
			rel.R.Tracks = append(rel.R.Tracks, o)
		}
	}
	return nil
}

// SetGenres removes all previously related items of the
// track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tracks's Genres accordingly.
// Replaces o.R.Genres with related.
// Sets related.R.Tracks's Genres accordingly.
func (o *Track) SetGenres(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genre) error {
	query := "delete from \"track_genres\" where \"track_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeGenresFromTracksSlice(o, related)
	if o.R != nil {
		o.R.Genres = nil
	}
	return o.AddGenres(ctx, exec, insert, related...)
}

// RemoveGenres relationships from objects passed in.
// Removes related items from R.Genres (uses pointer comparison, removal does not keep order)
// Sets related.R.Tracks.
func (o *Track) RemoveGenres(ctx context.Context, exec boil.ContextExecutor, related ...*Genre) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"track_genres\" where \"track_id\" = $1 and \"genre_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeGenresFromTracksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Genres {
			if rel != ri {
				continue
			}

			ln := len(o.R.Genres)
			if ln > 1 && i < ln-1 {
				o.R.Genres[i] = o.R.Genres[ln-1]
			}
			o.R.Genres = o.R.Genres[:ln-1]
			break
		}
	}

	return nil
}

func removeGenresFromTracksSlice(o *Track, related []*Genre) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tracks {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Tracks)
			if ln > 1 && i < ln-1 {
				rel.R.Tracks[i] = rel.R.Tracks[ln-1]
			}
			rel.R.Tracks = rel.R.Tracks[:ln-1]
			break
		}
	}
}

// Tracks retrieves all the records using an executor.
func Tracks(mods ...qm.QueryMod) trackQuery {
	mods = append(mods, qm.From("\"tracks\""))
	return trackQuery{NewQuery(mods...)}
}

// FindTrack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Track, error) {
	trackObj := &Track{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tracks")
	}

	return trackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Track) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackInsertCacheMut.RLock()
	cache, cached := trackInsertCache[key]
	trackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackType, trackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracks")
	}

	if !cached {
		trackInsertCacheMut.Lock()
		trackInsertCache[key] = cache
		trackInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Track.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Track) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	trackUpdateCacheMut.RLock()
	cache, cached := trackUpdateCache[key]
	trackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, append(wl, trackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracks")
	}

	if !cached {
		trackUpdateCacheMut.Lock()
		trackUpdateCache[key] = cache
		trackUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q trackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all track")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Track) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackUpsertCacheMut.RLock()
	cache, cached := trackUpsertCache[key]
	trackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackPrimaryKeyColumns))
			copy(conflict, trackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tracks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackType, trackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracks")
	}

	if !cached {
		trackUpsertCacheMut.Lock()
		trackUpsertCache[key] = cache
		trackUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Track record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Track) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Track provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackPrimaryKeyMapping)
	sql := "DELETE FROM \"tracks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Track) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrack(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracks\".* FROM \"tracks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackSlice")
	}

	*o = slice

	return nil
}

// TrackExists checks if the Track row exists.
func TrackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracks exists")
	}

	return exists, nil
}
